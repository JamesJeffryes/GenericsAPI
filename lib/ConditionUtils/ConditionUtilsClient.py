# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport
import time


class ConditionUtils(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login',
            service_ver='release',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def _check_job(self, job_id):
        return self._client._check_job('ConditionUtils', job_id)

    def _get_conditions_submit(self, params, context=None):
        return self._client._submit_job(
             'ConditionUtils.get_conditions', [params],
             self._service_ver, context)

    def get_conditions(self, params, context=None):
        """
        :param params: instance of type "GetConditionParams" (Get condition
           information in a friendly format ws_condition_set_id
           condition_set_ref list<string> conditions - Optional: Which
           conditions should be returned. defaults to all conditions in the
           set Returns {condition_label: {ontology_type(e.g. GO):
           [Factors]}}) -> structure: parameter "condition_set_ref" of type
           "ws_condition_set_id" (@id ws KBaseExperiments.ConditionSet),
           parameter "conditions" of list of String
        :returns: instance of type "GetConditionOutput" -> structure:
           parameter "conditions" of mapping from String to mapping from
           String to list of type "Factor" (Internally this is used to store
           factor information (without the value term) and also a format for
           returning data in a useful form from get_conditions @optional unit
           unit_ont_id value) -> structure: parameter "factor" of String,
           parameter "factor_ont_ref" of String, parameter "factor_ont_id" of
           String, parameter "unit" of String, parameter "unit_ont_id" of
           String, parameter "value" of String
        """
        job_id = self._get_conditions_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _file_to_condition_set_submit(self, params, context=None):
        return self._client._submit_job(
             'ConditionUtils.file_to_condition_set', [params],
             self._service_ver, context)

    def file_to_condition_set(self, params, context=None):
        """
        :param params: instance of type "FileToConditionSetParams"
           (input_shock_id and input_file_path - alternative input params,)
           -> structure: parameter "input_shock_id" of String, parameter
           "input_file_path" of String, parameter "output_ws_id" of String,
           parameter "output_obj_name" of String
        :returns: instance of type "FileToConditionSetOutput" -> structure:
           parameter "condition_set_ref" of type "ws_condition_set_id" (@id
           ws KBaseExperiments.ConditionSet)
        """
        job_id = self._file_to_condition_set_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _condition_set_to_tsv_file_submit(self, params, context=None):
        return self._client._submit_job(
             'ConditionUtils.condition_set_to_tsv_file', [params],
             self._service_ver, context)

    def condition_set_to_tsv_file(self, params, context=None):
        """
        :param params: instance of type "ConditionSetToTsvFileParams" ->
           structure: parameter "input_ref" of type "ws_condition_set_id"
           (@id ws KBaseExperiments.ConditionSet), parameter
           "destination_dir" of String
        :returns: instance of type "ConditionSetToTsvFileOutput" ->
           structure: parameter "file_path" of String
        """
        job_id = self._condition_set_to_tsv_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_condition_set_tsv_submit(self, params, context=None):
        return self._client._submit_job(
             'ConditionUtils.export_condition_set_tsv', [params],
             self._service_ver, context)

    def export_condition_set_tsv(self, params, context=None):
        """
        :param params: instance of type "ExportConditionSetParams" ->
           structure: parameter "input_ref" of type "ws_condition_set_id"
           (@id ws KBaseExperiments.ConditionSet)
        :returns: instance of type "ExportConditionSetOutput" -> structure:
           parameter "shock_id" of String
        """
        job_id = self._export_condition_set_tsv_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_condition_set_excel_submit(self, params, context=None):
        return self._client._submit_job(
             'ConditionUtils.export_condition_set_excel', [params],
             self._service_ver, context)

    def export_condition_set_excel(self, params, context=None):
        """
        :param params: instance of type "ExportConditionSetParams" ->
           structure: parameter "input_ref" of type "ws_condition_set_id"
           (@id ws KBaseExperiments.ConditionSet)
        :returns: instance of type "ExportConditionSetOutput" -> structure:
           parameter "shock_id" of String
        """
        job_id = self._export_condition_set_excel_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def status(self, context=None):
        job_id = self._client._submit_job('ConditionUtils.status', 
            [], self._service_ver, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]
